import { BreakpointName } from "@carbon/elements";
declare type ContentType = "script" | "style" | "markup";
interface WalkAndReplaceOptions {
    type: ContentType;
    content: string;
    filename: string;
}
interface NodeMeta {
    start: number;
    end: number;
}
interface NodeElement extends NodeMeta {
    type: "Element";
    name: string;
    attributes: Array<NodeMeta & {
        type: "Attribute";
        name: string;
        value: true | [{
            type?: "Text";
            raw: string;
        }];
    }>;
    children: Array<NodeText | NodeElement>;
}
export interface NodeText {
    type?: "Text";
    raw: string;
}
interface NodeImportDeclaration extends NodeMeta {
    type: "ImportDeclaration";
    source: {
        value: string;
    };
    specifiers: Array<{
        local: {
            name: string;
        };
        imported: {
            name: string;
        };
    }>;
}
interface NodeIdentifier extends NodeMeta {
    type: "Identifier";
    name: string;
}
interface NodeDeclaration extends NodeMeta {
    type: "Declaration";
    property: string;
    value: NodeMeta & {
        children: NodeChildString[];
    };
}
interface NodeRule extends NodeMeta {
    type: "Rule";
    prelude: NodeMeta & {
        type: "SelectorList";
        children: Array<NodeMeta & {
            type: "Selector";
            name: "div";
        }>;
    };
    block: NodeMeta & {
        children: NodeDeclaration[];
    };
}
export interface MediaFeature {
    type: "MediaFeature";
    name: "down" | "up" | "bp" | "between" | BreakpointName;
    value: null | {
        name: BreakpointName;
    } | {
        type: "Dimension";
        value: string;
        unit: string;
    };
}
interface NodeAtRule extends NodeMeta {
    type: "Atrule";
    name: string;
    prelude: NodeMeta & {
        type: string;
        children: Array<{
            type: "MediaQueryList";
            children: Array<{
                type: "MediaQuery";
                children: Array<MediaFeature | {
                    type: "WhiteSpace";
                } | {
                    type: "Identifier";
                    name: string;
                }>;
            }>;
        }>;
    };
    block: NodeMeta & {
        type: "Block";
    };
}
interface NodeFunction extends NodeMeta {
    type: "Function";
    name: string;
    children: Array<{
        type: "HexColor" | "Operator" | "Number" | "Dimension";
        value: string;
    }>;
}
export interface NodeChildString extends NodeMeta {
    type?: string;
    value: string;
}
export declare type Node = NodeElement | NodeImportDeclaration | NodeIdentifier | NodeDeclaration | NodeRule | NodeAtRule | NodeFunction;
export declare function walkAndReplace(options: WalkAndReplaceOptions, replaceWith: (enter: {
    node: Node;
    parentNode: Node;
}, replaceContent: (node: Node, replaceWith: string, replacee?: string) => void, getContent: (node: NodeMeta) => string) => void): string;
export {};
