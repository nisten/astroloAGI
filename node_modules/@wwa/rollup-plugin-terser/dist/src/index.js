"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.terser = void 0;
const code_frame_1 = require("@babel/code-frame");
const terser_1 = require("terser");
function buildOptions(pluginOptions, outputOptions) {
    const options = {};
    if (/^esm?$/u.test(outputOptions.format)) {
        options.module = true;
    }
    if (outputOptions.format === 'cjs') {
        options.toplevel = true;
    }
    return {
        ...options,
        ...pluginOptions,
        sourceMap: outputOptions.sourcemap === true || typeof outputOptions.sourcemap === 'string',
    };
}
function terser(pluginOptions = {}) {
    return {
        name: 'terser',
        renderChunk(code, _chunk, outputOptions) {
            const options = buildOptions(pluginOptions, outputOptions);
            return (0, terser_1.minify)(code, options)
                .then((result) => {
                if (options.nameCache) {
                    pluginOptions.nameCache = { ...options.nameCache };
                }
                return {
                    code: result.code,
                    map: result.map,
                };
            })
                .catch((error) => {
                const { message, line, col: column } = error;
                console.error((0, code_frame_1.codeFrameColumns)(code, { start: { line, column } }, { message }));
                throw error;
            });
        },
    };
}
exports.terser = terser;
//# sourceMappingURL=index.js.map